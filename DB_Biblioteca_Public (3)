-- =========================================================
-- Supabase / PostgreSQL
-- Estrutura no schema: public
-- =========================================================

-- Garantir que estamos a trabalhar no schema public
SET search_path TO public;

-- 1) Tipo ENUM (estado do exemplar) no schema public
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1
    FROM pg_type t
    JOIN pg_namespace n ON n.oid = t.typnamespace
    WHERE t.typname = 'livro_estado' AND n.nspname = 'public'
  ) THEN
    CREATE TYPE public.livro_estado AS ENUM ('Novo','Bom','Usado','Danificado');
  END IF;
END$$;

-- =========================
-- Tabela: CODIGO_POSTAL
-- =========================
CREATE TABLE IF NOT EXISTS public.codigo_postal (
  cod_postal     VARCHAR(10) PRIMARY KEY,  -- ex.: '2000-123'
  cod_localidade VARCHAR(80) NOT NULL
);

-- =========================
-- Tabela: EDITORA
-- =========================
CREATE TABLE IF NOT EXISTS public.editora (
  ed_cod        INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ed_nome       VARCHAR(120) NOT NULL,
  ed_pais       VARCHAR(60)  NOT NULL,
  ed_morada     VARCHAR(150),
  ed_cod_postal VARCHAR(10),
  ed_email      VARCHAR(120),
  ed_tlm        VARCHAR(20),
  CONSTRAINT fk_editora_cod_postal
    FOREIGN KEY (ed_cod_postal) REFERENCES public.codigo_postal (cod_postal)
      ON UPDATE CASCADE ON DELETE SET NULL
);
CREATE INDEX IF NOT EXISTS ix_editora_cod_postal ON public.editora(ed_cod_postal);

-- =========================
-- Tabela: AUTOR
-- =========================
CREATE TABLE IF NOT EXISTS public.autor (
  au_cod  INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  au_nome VARCHAR(120) NOT NULL,
  au_pais VARCHAR(60)
);

-- =========================
-- Tabela: GENERO
-- =========================
CREATE TABLE IF NOT EXISTS public.genero (
  ge_genero VARCHAR(20) PRIMARY KEY
);

-- =========================
-- Tabela: LIVRO
-- =========================
CREATE TABLE IF NOT EXISTS public.livro (
  li_cod     INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  li_titulo  VARCHAR(200) NOT NULL,
  li_ano     SMALLINT CHECK (li_ano BETWEEN 1800 AND 2100),
  li_edicao  VARCHAR(20),
  li_isbn    VARCHAR(20) UNIQUE,
  li_editora INTEGER,
  li_autor   INTEGER,
  li_genero  VARCHAR(20),
  CONSTRAINT fk_livro_editora
    FOREIGN KEY (li_editora) REFERENCES public.editora (ed_cod)
      ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT fk_livro_autor
    FOREIGN KEY (li_autor)   REFERENCES public.autor (au_cod)
      ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT fk_livro_genero
    FOREIGN KEY (li_genero)  REFERENCES public.genero (ge_genero)
      ON UPDATE CASCADE ON DELETE SET NULL
);
CREATE INDEX IF NOT EXISTS ix_livro_editora ON public.livro(li_editora);
CREATE INDEX IF NOT EXISTS ix_livro_autor   ON public.livro(li_autor);
CREATE INDEX IF NOT EXISTS ix_livro_genero  ON public.livro(li_genero);

-- =========================
-- Tabela: LIVRO_EXEMPLAR
-- =========================
CREATE TABLE IF NOT EXISTS public.livro_exemplar (
  lex_cod        INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  lex_li_cod     INTEGER NOT NULL,
  lex_estado     public.livro_estado NOT NULL DEFAULT 'Bom',
  lex_disponivel BOOLEAN      NOT NULL DEFAULT TRUE,
  CONSTRAINT fk_lex_livro
    FOREIGN KEY (lex_li_cod) REFERENCES public.livro (li_cod)
      ON UPDATE CASCADE ON DELETE RESTRICT
);
CREATE INDEX IF NOT EXISTS ix_lex_livro ON public.livro_exemplar(lex_li_cod);

-- =========================
-- Tabela: UTENTE
-- =========================
CREATE TABLE IF NOT EXISTS public.utente (
  ut_cod        INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ut_nome       VARCHAR(120) NOT NULL,
  ut_nif        VARCHAR(15),
  ut_email      VARCHAR(120),
  ut_tlm        VARCHAR(20),
  ut_morada     VARCHAR(150),
  ut_cod_postal VARCHAR(10),
  CONSTRAINT fk_utente_cod_postal
    FOREIGN KEY (ut_cod_postal) REFERENCES public.codigo_postal (cod_postal)
      ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT uk_utente_email UNIQUE (ut_email)
);
CREATE INDEX IF NOT EXISTS ix_utente_cod_postal ON public.utente(ut_cod_postal);

-- =========================
-- Tabela: REQUISICAO
-- =========================
CREATE TABLE IF NOT EXISTS public.requisicao (
  re_cod             INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  re_ut_cod          INTEGER NOT NULL,
  re_lex_cod         INTEGER NOT NULL,
  re_data_requisicao DATE    NOT NULL DEFAULT CURRENT_DATE,
  re_data_devolucao  DATE,
  CONSTRAINT fk_req_utente
    FOREIGN KEY (re_ut_cod)  REFERENCES public.utente (ut_cod)
      ON UPDATE CASCADE ON DELETE RESTRICT,
  CONSTRAINT fk_req_exemplar
    FOREIGN KEY (re_lex_cod) REFERENCES public.livro_exemplar (lex_cod)
      ON UPDATE CASCADE ON DELETE RESTRICT
);
CREATE INDEX IF NOT EXISTS ix_req_utente   ON public.requisicao(re_ut_cod);
CREATE INDEX IF NOT EXISTS ix_req_exemplar ON public.requisicao(re_lex_cod);
